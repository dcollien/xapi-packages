{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","path","_useState","useState","tabs","config","backgroundColor","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","selected","setSelected","useEffect","_fetchData","asyncToGenerator","regenerator_default","a","mark","_callee","configResponse","wrap","_context","prev","next","axios","get","concat","sent","all","map","tab","src","forEach","response","i","content","__html","stop","apply","this","arguments","fetchData","react_default","createElement","className","esm","selectedIndex","onSelect","style","key","disabledClassName","selectedClassName","title","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAuDeA,MAlDf,WACE,IAAMC,EAAO,OADAC,EAEWC,mBAAS,CAAEC,KAAM,GAAIC,OAAQ,CAACC,gBAAiB,UAF1DC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GAENQ,EAFMH,EAAA,GAEAI,EAFAJ,EAAA,GAAAK,EAGmBT,mBAAS,GAH5BU,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGIE,EAHJF,EAAA,GAyBb,OApBAG,oBAAU,WAAM,SAAAC,IAAA,OAAAA,EAAAT,OAAAU,EAAA,EAAAV,CAAAW,EAAAC,EAAAC,KACd,SAAAC,IAAA,IAAAC,EAAAlB,EAAAD,EAAA,OAAAe,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC+BC,IAAMC,IAAN,GAAAC,OAAa7B,EAAb,iBAD/B,cACQsB,EADRE,EAAAM,KAEQ1B,EAASkB,EAAeb,KACxBN,EAAOC,EAAOD,KAHtBqB,EAAAE,KAAA,EAIiCC,IAAMI,IACnC5B,EAAK6B,IAAI,SAAAC,GAAG,OAAIN,IAAMC,IAAIK,EAAIC,QALlC,OAAAV,EAAAM,KAOmBK,QAAQ,SAACC,EAAUC,GAClClC,EAAKkC,GAAGC,QAAU,CAAEC,OAAQH,EAAS3B,QAEvCC,EAAQN,GACe,MAAnBA,EAAOS,UACTC,EAAYV,EAAOS,UAZvB,yBAAAW,EAAAgB,SAAAnB,OADcoB,MAAAC,KAAAC,YAAA,WAAA3B,EAAAyB,MAAAC,KAAAC,WAiBdC,IACC,IAGDC,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,OACbF,EAAA1B,EAAA2B,cAACE,EAAA,EAAD,CAAMC,cAAepC,EAAUqC,SAAUpC,GACvC+B,EAAA1B,EAAA2B,cAACE,EAAA,EAAD,CAASD,UAAU,OAAOI,MAAO,CAAC9C,gBAAiBI,EAAKL,OAAOC,kBAC5DI,EAAKN,KAAK6B,IAAI,SAACC,EAAKI,GAAN,OACbQ,EAAA1B,EAAA2B,cAACE,EAAA,EAAD,CACEI,IAAKf,EACLU,UAAU,MACVM,kBAAkB,eAClBC,kBAAkB,gBAEjBrB,EAAIsB,UAIV9C,EAAKN,KAAK6B,IAAI,SAACC,EAAKI,GAAN,OACbQ,EAAA1B,EAAA2B,cAACE,EAAA,EAAD,CAAUI,IAAKf,EAAGU,UAAU,cAAcO,kBAAkB,wBAC1DT,EAAA1B,EAAA2B,cAAA,OAAKU,wBAAyBvB,EAAIK,gBCnC1BmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAA1B,EAAA2B,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a01c2b91.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport axios from \"axios\";\n\nfunction App() {\n  const path = \"tabs\";\n  const [data, setData] = useState({ tabs: [], config: {backgroundColor: \"#eee\"} });\n  const [selected, setSelected] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const configResponse = await axios.get(`${path}/config.json`);\n      const config = configResponse.data;\n      const tabs = config.tabs;\n      const contentResponses = await axios.all(\n        tabs.map(tab => axios.get(tab.src))\n      );\n      contentResponses.forEach((response, i) => {\n        tabs[i].content = { __html: response.data };\n      });\n      setData(config);\n      if (config.selected != null) {\n        setSelected(config.selected);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Tabs selectedIndex={selected} onSelect={setSelected}>\n        <TabList className=\"tabs\" style={{backgroundColor: data.config.backgroundColor}}>\n          {data.tabs.map((tab, i) => (\n            <Tab\n              key={i}\n              className=\"tab\"\n              disabledClassName=\"tab-disabled\"\n              selectedClassName=\"tab-selected\"\n            >\n              {tab.title}\n            </Tab>\n          ))}\n        </TabList>\n        {data.tabs.map((tab, i) => (\n          <TabPanel key={i} className=\"tab-content\" selectedClassName=\"tab-content-selected\">\n            <div dangerouslySetInnerHTML={tab.content} />\n          </TabPanel>\n        ))}\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}